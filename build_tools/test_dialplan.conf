
[test_redis_command_set]
exten => start,1,Log(NOTICE, Starting ${CONTEXT})
    same => n,NoOp(${REDIS_COMMAND(SET ${TEST_KEY} test_value)})
    same => n,GotoIf($[ ${REDIS(${TEST_KEY})}=test_value]?:test_key_FAIL)
    same => n,GotoIf($[ ${REDIS_RESULT}=test_value ]?:test_key_FAIL)
    same => n,Return
    same => n(test_key_FAIL),Log(ERROR, TEST REDIS(${TEST_KEY}) set and get FAILED, REDIS_RESULT = ${REDIS_RESULT})


[test_redis_command_hset_and_hget]
exten => start,1,Log(NOTICE, Starting ${CONTEXT})
    same => n,NoOp(${REDIS_COMMAND(HSET ${HASH_KEY} ${TEST_KEY} test_hash_value)})
    same => n,GotoIf($[ ${REDIS_COMMAND(HGET ${HASH_KEY} ${TEST_KEY})}=test_hash_value ]?:test_hash_FAIL)
    same => n,GotoIf($[ ${REDIS_RESULT}=test_hash_value ]?:test_hash_FAIL)
    same => n,Return
    same => n(test_hash_FAIL),Log(ERROR, TEST REDIS(${HASH_KEY},${TEST_KEY}) set and get FAILED, REDIS_RESULT = ${REDIS_RESULT})


[test_redis_command_del]
exten => start,1,Log(NOTICE, Starting ${CONTEXT})
    same => n,NoOp(${REDIS_COMMAND(SET ${TEST_KEY} test_value)})
    same => n,NoOp(${REDIS_COMMAND(DEL ${TEST_KEY})})
    same => n,GotoIf($[ "${REDIS(${TEST_KEY})}"="nil" ]?:test_del_key_FAIL)
    same => n,Return
    same => n(test_del_key_FAIL),Log(ERROR, TEST REDIS_DELETE(${TEST_KEY}) FAILED)


[test_redis_command_array]
exten => start,1,Log(NOTICE, Starting ${CONTEXT})
    same => n,NoOp(${REDIS_COMMAND(LPUSH ${ARRAY_KEY} 5000)})
    same => n,NoOp(${REDIS_COMMAND(LPUSH ${ARRAY_KEY} 5001)})
    same => n,NoOp(${REDIS_COMMAND(LPUSH ${ARRAY_KEY} 5002)})
    same => n,NoOp(${REDIS_COMMAND(LPUSH ${ARRAY_KEY} 5003)})
    same => n,NoOp(${REDIS_COMMAND(LPOP ${ARRAY_KEY})})
    same => n,GotoIf($[ ${REDIS_RESULT}=5003 ]?:test_array_FAIL)
    same => n,NoOp(${REDIS_COMMAND(LPOP ${ARRAY_KEY})})
    same => n,GotoIf($[ ${REDIS_RESULT}=5002 ]?:test_array_FAIL)
    same => n,NoOp(${REDIS_COMMAND(LPOP ${ARRAY_KEY})})
    same => n,GotoIf($[ ${REDIS_RESULT}=5001 ]?:test_array_FAIL)
    same => n,NoOp(${REDIS_COMMAND(LPOP ${ARRAY_KEY})})
    same => n,GotoIf($[ ${REDIS_RESULT}=5000 ]?:test_array_FAIL)
    same => n,NoOp(${REDIS_COMMAND(LPOP ${ARRAY_KEY})})
    same => n,GotoIf($[ "${REDIS_RESULT}"="nil" ]?:test_array_FAIL)
    same => n,Return
    same => n(test_array_FAIL),Log(ERROR, TEST redis array LPUSH and LPOP FAILED, REDIS_RESULT = ${REDIS_RESULT})


[test_redis_command_array_response]
exten => start,1,Log(NOTICE, Starting ${CONTEXT})
    same => n,NoOp(${REDIS_COMMAND(SET ${TEST_KEY} 5000)})
    same => n,NoOp(${REDIS_COMMAND(SET ${TEST_KEY}1 5001)})
    same => n,NoOp(${REDIS_COMMAND(SET ${TEST_KEY}2 5002)})
    same => n,NoOp(${REDIS_COMMAND(MGET ${TEST_KEY} ${TEST_KEY}1 ${TEST_KEY}2)})
    same => n,GotoIf($[ "${REDIS_RESULT}"="5000,5001,5002" ]?:test_array_response_FAIL)
    same => n,Return
    same => n(test_array_response_FAIL),Log(ERROR, TEST redis array result FAILED, REDIS_RESULT = ${REDIS_RESULT})


[test_redis_set_and_get]
exten => start,1,Log(NOTICE, Starting ${CONTEXT})
    same => n, Set(REDIS(${TEST_KEY})=test_value)
    same => n, GotoIf($[ ${REDIS(${TEST_KEY})}=test_value]?:test_key_FAIL)
    same => n, GotoIf($[ ${REDIS_RESULT}=test_value ]?:test_key_FAIL)
    same => n, Return
    same => n(test_key_FAIL), Log(ERROR, TEST REDIS(${TEST_KEY}) set and get FAILED, REDIS_RESULT = ${REDIS_RESULT})


[test_redis_del]
exten => start, 1, Log(NOTICE, Starting ${CONTEXT})
    same => n, Set(REDIS(${TEST_KEY})=test_value)
    same => n, NoOp(${REDIS_DELETE(${TEST_KEY})})
    same => n, GotoIf($[ "${REDIS(${TEST_KEY})}"="nil" ]?:test_del_key_FAIL)
    same => n, Return
    same => n(test_del_key_FAIL),Log(ERROR, TEST REDIS_DELETE(${TEST_KEY}) FAILED)


[test_redis_exist_false]
exten => start, 1, Log(NOTICE, Starting ${CONTEXT})
    same => n, GotoIf(${REDIS_EXISTS(${TEST_KEY})}?test_exists_false_FAIL)
    same => n, GotoIf(${REDIS_RESULT}?test_exists_false_FAIL:)
    same => n, Return
    same => n(test_exists_false_FAIL),Log(ERROR, TEST REDIS_EXISTS(${TEST_KEY}) FAILED, REDIS_RESULT = ${REDIS_RESULT})

[test_redis_exist_true]
exten => start, 1, Log(NOTICE, Starting ${CONTEXT})
    same => n,Set(REDIS(${TEST_KEY})=value)
    same => n,GotoIf(${REDIS_EXISTS(${TEST_KEY})}?:test_exist_true_FAIL)
    same => n,GotoIf(${REDIS_RESULT}?:test_exist_true_FAIL)
    same => n, Return
    same => n(test_exist_true_FAIL),Log(ERROR, TEST test_exist_true REDIS_EXISTS(${TEST_KEY}) FAILED, REDIS_RESULT = ${REDIS_RESULT})

[test_redis_error]
exten => start, 1, Log(NOTICE, Starting ${CONTEXT})
    same => n,NoOp(${REDIS_COMMAND(GET KEY_THAT_DOESNT_EXIST)})
    same => n,GotoIf($[ "NULL${REDIS_ERROR}"="NULL" ]?:test_redis_error_FAIL)
    same => n,Return
    same => n(test_redis_error_FAIL),Log(ERROR, TEST test_redis_error FAILED, REDIS_RESULT = ${REDIS_RESULT}, REDIS_ERROR = ${REDIS_ERROR})



[test_func_redis]

exten => 1,1,Log(NOTICE, Starting tests for func_redis)
    same => n,Answer()
    same => n,Set(TEST_KEY=KEY_${CHANNEL})
    same => n,Set(HASH_KEY=HASH_${CHANNEL})
    same => n,Set(ARRAY_KEY=ARRAY_${CHANNEL})

    same => n,Gosub(test_redis_del,start,1)

    same => n,Set(COUNTER=0)
    same => n,While($[ ${COUNTER} < 50 ])
        same => n,Gosub(test_redis_set_and_get,start,1)
        same => n,Gosub(test_redis_del,start,1)
        same => n,Gosub(test_redis_exist_false,start,1)
        same => n,Gosub(test_redis_exist_true,start,1)
        same => n,Set(COUNTER=$[ ${COUNTER} +1 ])
    same => n,EndWhile

    same => n,Set(COUNTER=0)
    same => n,While($[ ${COUNTER} < 50 ])
        same => n,Gosub(test_redis_command_set,start,1)
        same => n,Gosub(test_redis_command_hset_and_hget,start,1)
        same => n,Gosub(test_redis_command_del,start,1)
        same => n,Gosub(test_redis_command_array,start,1)
        same => n,Gosub(test_redis_command_array_response,start,1)
        same => n,Gosub(test_redis_error,start,1)
        same => n,Set(COUNTER=$[ ${COUNTER} + 1 ])
    same => n,EndWhile

    same => n,Hangup()


exten => 2,1,Answer()
    same => n,Wait(10000)
    same => n,Hangup()

