

[subTestRedis]
exten => start,1,Set(TEST_KEY=KEY_${CHANNEL})
same => n,Set(HASH_KEY=HASH_${CHANNEL})

same => n(test_key),Set(REDIS(${TEST_KEY})=test_value)
same => n,GotoIf($[ ${REDIS(${TEST_KEY})}=test_value]?:test_key_FAIL)
same => n,GotoIf($[ ${REDIS_RESULT}=test_value ]?test_hash:test_key_FAIL)
same => n(test_key_FAIL),Log(NOTICE, TEST REDIS(${TEST_KEY}) set and get FAILED, REDIS_RESULT = ${REDIS_RESULT})

same => n(test_hash),Set(REDIS(${HASH_KEY},${TEST_KEY})=test_hash_value)
same => n,GotoIf($[ ${REDIS(${HASH_KEY},${TEST_KEY})}=test_hash_value ]?:test_hash_FAIL)
same => n,GotoIf($[ ${REDIS_RESULT}=test_hash_value ]?test_del_key:test_hash_FAIL)
same => n(test_hash_FAIL),Log(NOTICE, TEST REDIS(${HASH_KEY},${TEST_KEY}) set and get FAILED, REDIS_RESULT = ${REDIS_RESULT})

same => n(test_del_key),NoOp(${REDIS_DELETE(${TEST_KEY})})
same => n,GotoIf($[ NULL${REDIS(${TEST_KEY})} = NULL ]?test_del_field:test_del_key_FAIL)
same => n(test_del_key_FAIL),Log(NOTICE, TEST REDIS_DELETE(${TEST_KEY}) FAILED)

same => n(test_del_field),Set(REDIS(${HASH_KEY},${TEST_KEY}2)=test_hash_value2)
same => n,NoOp(${REDIS_DELETE(${HASH_KEY},${TEST_KEY})}))
same => n,GotoIf($[ NULL${REDIS(${HASH_KEY},${TEST_KEY})} = NULL ]?test_exist_false:test_del_field_FAIL)
same => n(test_del_field_FAIL),Log(NOTICE, TEST REDIS_DELETE(${HASH_KEY},${TEST_KEY}) FAILED)

same => n(test_exist_false),GotoIf(${REDIS_EXISTS(${TEST_KEY})}?test_exists_false_FAIL)
same => n,GotoIf(${REDIS_RESULT}?test_exists_false_FAIL:test_exist_true)
same => n(test_exists_false_FAIL),Log(NOTICE, TEST REDIS_EXISTS(${TEST_KEY}) FAILED, REDIS_RESULT = ${REDIS_RESULT})

same => n(test_exist_true),Set(REDIS(${TEST_KEY})=value)
same => n,GotoIf(${REDIS_EXISTS(${TEST_KEY})}?:test_exist_true_FAIL)
same => n,GotoIf(${REDIS_RESULT}?test_publish:test_exist_true_FAIL)
same => n(test_exist_true_FAIL),Log(NOTICE, TEST test_exist_true REDIS_EXISTS(${TEST_KEY}) FAILED, REDIS_RESULT = ${REDIS_RESULT})

; There is't a check for this from the dialplan so if it
; dont broke asterisk we assume that it works (fool of me)
same => n(test_publish),Set(REDIS_PUBLISH(channel)=msg)
same => n,Return(0)



[test_func_redis]

exten => 1,1,Log(NOTICE, Starting tests for func_redis)
same => n,Answer()

same => n,Set(COUNTER=0)
same => n,While($[ 1 ])
same => n,GoSub(subTestRedis,start,1)
same => n,Set(COUNTER=$[ ${COUNTER} +1 ])
same => n,EndWhile
same => n,HangUp()

exten => 2,1,Answer()
same => n,Wait(1000)
same => n,Hangup()

